#provider


provider "aws" {
	 region     = "ap-south-1"
     profile = "sachin"
     
     
}    



#keypair


resource "aws_key_pair" "keygen" {
	 key_name   = "terrakey"
	 public_key = "6
     AAAAB3NzaC1yc2EAAAADAQABAAABAQC+rqKotD9lmWNQ692Q8MatpcN1cnrgI2xJ
     slwMq49wQHUR2Hpo2hoRnqB**********************"
     // palce your cloud key here...
}




#create ec2 instance



resource "aws_instance" "instance_ec2" {
depends_on = [aws_key_pair.keygen,
			   aws_security_group.allow_http,
				]
		

		

	ami      = "ami-0447a12f28fddb066"
	instance_type = "t2.micro"
	key_name = "me"
	security_groups = ["allow_http"] 
	tags = {
	Name = "OS1"
	}
		

connection {
	type     = "ssh"
	user     = "ec2-user"
	private_key = file("C:/Users/alexa/Downloads/me.pem")
	host     = "${aws_instance.instance_ec2.public_ip}"
	}
		
provisioner "remote-exec"  {
	inline = [
		"sudo yum install httpd php git -y",                 
		 "sudo systemctl start httpd",                  
		 "sudo systemctl enable httpd",                   
     ]
   }
}
	
  
  
  
  
#create ebs volume


resource "aws_ebs_volume" "ebs_volume" {
		  availability_zone = "${aws_instance.instance_ec2.availability_zone}"
		  size              = 1
		

		  tags = {
		    Name = "ebs_volume1"
 }
}


#create security group


resource "aws_security_group" "allow_http" {
	   name        = "allow_http"
	   description = "Allows http and ssh"
	   vpc_id      = "vpc-fa7e6292"
		

  ingress {
	    description = "HTTP allow"
	    from_port   = 80
	    to_port     = 80
        protocol    = "tcp"
	    cidr_blocks = ["0.0.0.0/0"]
    }
		
  ingress {
		description = "ssh"
		from_port   = 22
		to_port     = 22
		protocol    = "tcp"
		cidr_blocks = ["0.0.0.0/0"]
    }
		
  egress {
		from_port   = 0
		to_port     = 0
		protocol    = "-1"
		cidr_blocks = ["0.0.0.0/0"]
    }
		
  tags = {
		 Name = "allow_HTTP"
	}		
}



#create s3 bucket


resource "aws_s3_bucket" "terrabucket" {
		  bucket = "justlookingforsomeuniquenamewithoutspaces"
		  force_destroy = true
		  acl    = "public-read"
		  policy = <<POLICY
{
		  "Version": "2012-10-17",
		  "Id": "MYBUCKETPOLICY",
		  "Statement": [
{
		  "Sid": "PublicReadGetObject",
		  "Effect": "Allow",
	      "Principal": "*",
	      "Action": "s3:*", 
 	      "Resource": "arn:aws:s3:::justlookingforsom
                 euniquenamewithoutspaces/*"
		 }
	]
}
POLICY
		
}
	
  
  
#put object in s3 bucket


resource "aws_s3_bucket_object" "object" {
		  bucket = "justlookingforsomeuniquenamewithoutspaces"
		  key    = "photo.jpg"
		  source = "https://sachinjangid2k.github.io/terra-image/ttt.html"
		  etag = "https://sachinjangid2k.github.io/terra-image/ttt.html"
		depends_on = [aws_s3_bucket.terrabucket,
				]
		
}



#attach ebs volume


esource "aws_volume_attachment" "ebs_att" {
	depends_on = [aws_ebs_volume.ebs_volume,
				aws_instance.instance_ec2,
				]
		

		

	device_name = "/dev/sdh"
	volume_id   = "${aws_ebs_volume.ebs_volume.id}"
	instance_id = "${aws_instance.instance_ec2.id}"
}


#Null Resource to do some Configuration(mount that volume into /var/www/html)

resource "null_resource" "null1" {
		
depends_on = [aws_volume_attachment.ebs_att,
               ]	
		
        connection {
		   type     = "ssh"
		   user     = "ec2-user"
		   private_key = file("C:/alexa/Downloads/me.pem")
		   host     = "${aws_instance.instance_ec2.public_ip}"
		  }
			provisioner "remote-exec"  {
				inline = [                  
		     		"sudo mkfs.ext4  /dev/xvdh",
		      		"sudo mount  /dev/xvdh  /var/www/html",
		      		"sudo rm -rf /var/www/html/*",
		      		"sudo git clone https://sachinjangid2k.github.io/terra-image/ttt.html /var/www/html/"
	]
  }
}


#Cloud front attached to S3 bucket


resource "aws_cloudfront_distribution" "s3_distribution" {
  origin {
	domain_name = "${aws_s3_bucket.bucket1.bucket_regional_domain_name}"
    origin_id   = "s3-bucket1-bucket"
	s3_origin_config {
		origin_access_identity = "origin-access-identity/cloudfront/ABCDEFG1234567"
	}
}
		
enabled             = true
is_ipv6_enabled     = true
comment             = "Some comment"
default_root_object = "index.html"
		

logging_config {
	include_cookies = false
	bucket          = "mylogs.s3.amazonaws.com"
	prefix          = "myprefix"
}
		

aliases = ["mysite.example.com", "yoursite.example.com"]
		

default_cache_behavior {
	allowed_methods  = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
	cached_methods   = ["GET", "HEAD"]
	target_origin_id = "s3-bucket1-bucket"
		

	forwarded_values {
	  query_string = false
		

	  cookies {
		  forward = "none"
	  }
	}
		

	viewer_protocol_policy = "allow-all"
		    min_ttl                = 0
		    default_ttl            = 3600
		    max_ttl                = 86400
    }
    
    
    
    
    #you have to do this all in terraform extension file (.tf)
